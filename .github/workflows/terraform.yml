# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

# workflow triggers
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

  # Allows external webhook trigger
  repository_dispatch:
    types:
      - webhook

permissions:
  contents: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      # Pass inputs to env definitions to prevent injection attacks
      BAZ_TYPE: ${{ github.event.client_payload.baz_type }}
      DOMAIN_AREA: ${{ github.event.client_payload.domain_area }}
      ANALYTICS_AREA: ${{ github.event.client_payload.analytics_area }}
      SRM_TIER: ${{ github.event.client_payload.srm_tier }}
      CREATE_BAZ_SNOWFLAKE_ACCOUNT: ${{ github.event.client_payload.snowflake_account }}
      UID: ${{ github.run_id }}-${{ github.run_attempt }}
    steps:
    # Checkout the repository to the GitHub Actions runner
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Create .env.local
      run: |
          # Merge to .env.local to ensure variables are passed to docker container
          echo "BAZ_TYPE=${{ env.BAZ_TYPE }}" >> .env.local
          echo "DOMAIN_AREA=${{ env.DOMAIN_AREA }}" >> .env.local
          echo "ANALYTICS_AREA=${{ env.ANALYTICS_AREA }}" >> .env.local
          echo "SRM_TIER=${{ env.SRM_TIER }}" >> .env.local
          echo "CREATE_BAZ_SNOWFLAKE_ACCOUNT=${{ env.CREATE_BAZ_SNOWFLAKE_ACCOUNT }}" >> .env.local
          cat .env.local
    - name: Create Baz
      run: make testapi
    - name: Create Branch
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        branch: create_baz/${{ env.UID }}
        create_branch: true
        commit_message: "Generated BAZ ${{ env.BAZ_TYPE }} ${{ env.DOMAIN_AREA }} ${{ env.ANALYTICS_AREA }}"
    - name: Create Pull Request
      run: make createPr
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
